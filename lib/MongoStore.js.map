{"version":3,"sources":["../src/MongoStore.js"],"names":[],"mappings":"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","file":"MongoStore.js","sourcesContent":["import AbstractStore from 'liwi/lib/AbstractStore';\nimport Cursor from './Cursor';\nimport { MongoClient, ObjectID } from 'mongodb';\n\nconst regexpObjectId = /^[a-f\\d]{24}$/i;\nexport default class MongoStore extends AbstractStore {\n    initialize() {\n        this.manager.VO.keyPath = '_id';\n        return new Promise((resolve, reject) => {\n            if (!this.manager.VO.name || this.manager.VO.name.toLowerCase() === 'function') {\n                throw new Error('Unable to find model name ' + this.manager.VO.name +\n                                        ', ' + this.manager.name);\n            }\n\n            this.db.connection.collection(this.manager.VO.name, { w: 1 }, (err, collection) => {\n                if (err) {\n                    return reject(err);\n                }\n\n                this.collection = collection;\n                resolve();\n            });\n        });\n    }\n\n    store() {\n        return this.collection;\n    }\n\n    toId(id) {\n        if (id instanceof ObjectID) {\n            return id;\n        }\n\n        if (typeof id === 'string' && id.length === 24 && regexpObjectId.test(id)) {\n            return new ObjectID(id);\n        }\n\n        return id;\n    }\n\n    createMongoId(vo) {\n        if (!vo.id) {\n            vo.data._id = new ObjectID();\n        }\n    }\n\n    insert(options) {\n        return new Promise((resolve, reject) => {\n            this.collection.insert(options.data, options, (err, item) => {\n                if (err) {\n                    return reject(err);\n                }\n\n                resolve(item);\n            });\n        });\n    }\n\n    update(options) {\n        return new Promise((resolve, reject) => {\n            var data = !options.partialUpdate ? options.data : { $set: options.data };\n            this.collection.update(options.criteria, data, options, (err, result) => {\n                if (err) {\n                    return reject(err);\n                }\n\n                resolve(result.n);\n            });\n        });\n    }\n\n    remove(options) {\n        return new Promise((resolve, reject) => {\n            this.collection.remove(options.criteria, options, (err, result) => {\n                if (err) {\n                    return reject(err);\n                }\n\n                resolve(result.n);\n            });\n        });\n    }\n\n    /** @see http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#findone */\n    findOne(query, options){\n        return new Promise((resolve, reject) => {\n            // selector, options, callback?\n            // options= limit,sort,fields,skip,hint,tailable,tailableRetryInterval,returnKey,maxScan,min,max,comment,raw\n            this.collection.findOne(query, options, (err, result) => {\n                if (err) {\n                    return reject(err);\n                }\n\n                resolve(result);\n            });\n        });\n    }\n\n    /** @see http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#find */\n    cursor(query, options) {\n        return new Promise((resolve, reject) => {\n            // selector, options, callback?\n            // options= limit,sort,fields,skip,hint,tailable,returnKey,maxScan,min,max,comment,raw\n            this.collection.find(query, options, (err, cursor) => {\n                if (err) {\n                    return reject(err);\n                }\n\n                resolve(new Cursor(cursor, this, query));\n            });\n        });\n    }\n}\n\nMongoStore.ObjectID = ObjectID;\n\nMongoStore.initialize = function(db) {\n    return new Promise((resolve, reject) => {\n        var options = Object.assign({\n            host: 'localhost',\n            port: '27017',\n        }, db.options);\n        var connectionString = 'mongodb://' + (options.user ? options.user + ':' + options.password + '@' : '' )\n                            + options.host + ':' + options.port + '/' + db.dbName;\n        MongoClient.connect(connectionString, function(err, connection) {\n            if (err) {\n                console.error('connection error:', err);\n                return reject(err);\n            }\n\n            db.connection = connection;\n            resolve();\n        });\n    });\n};\n\nMongoStore.close = function(db) {\n    db.connection.close();\n};\n"]}